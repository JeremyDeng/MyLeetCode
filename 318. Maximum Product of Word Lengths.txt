//time:O(n^2), space:O(n)
class Solution {
    public int maxProduct(String[] words) {
        int res = 0;
        int[] bytes = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            int val = 0;
            for (int j = 0; j < words[i].length(); j++) {
                val |= 1 << (words[i].charAt(j) - 'a');
            }
            bytes[i] = val;
        }
        for (int i = 0; i < bytes.length; i++) {
            for (int j = i + 1; j < bytes.length; j++) {
                if ((bytes[i] & bytes[j]) == 0) {
                    res = Math.max(res, words[i].length() * words[j].length());
                }
            }
        }
        return res;
    }
}

/*
val |= 1 << (words[i].charAt(j) - 'a');
     1 << 0  00001 = 1  a
     1 << 1  00010 = 2  b
     1 << 2  00100 = 4  c
     1 << 3  01000 = 8
     abc = 00111 = 7   ab = 00011 = 3
     bytes[i] & bytes[j] == 0
     "abc", "ba", "ef"
*/