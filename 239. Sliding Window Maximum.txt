//time:O(n),space:O(n)
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0)
            return new int[0];
        int[] res = new int[nums.length - k + 1];
        Deque<Integer> deque = new LinkedList<>();
        for(int i = 0; i < nums.length; i++){
            if(!deque.isEmpty() && deque.peek() < i - k + 1){
                deque.poll();
            }
            while(!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]){
                deque.pollLast();
            }
            deque.offer(i);
            if(i - k + 1 >= 0){
                res[i - k + 1] = nums[deque.peek()];
            }
        }
        return res;
    }
}

/*
1. Use deque("deck" double-ended queue).
   Strore index in deque , the value is in descending order.
   head----tail.
2. // remove numbers out of range k.
   // remove smaller numbers in k range as they are useless.
   // if start point is greater or equal to 0, record in res[].
*/