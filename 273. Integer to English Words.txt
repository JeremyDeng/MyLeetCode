//time:O(1), space:O(1)
//2^32-1 is about 4 billion, so num can only cycle at most 4 times in while-loop.
//So, time complexity is O(1).
class Solution {
    String[] less20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    String[] thousands = {"", "Thousand", "Million", "Billion"};
    
    public String numberToWords(int num) {
        if(num == 0) return "Zero";
        String res = "";
        int i = 0;
        while(num > 0){
            if(num % 1000 != 0){
                res = helper(num % 1000) + thousands[i] + " " + res;
            }
            num /= 1000;
            i++;
        }
        return res.trim();
    }
    
    public String helper(int num){
        if(num == 0) return "";
        if(num < 20){
            return less20[num % 20] + " ";
        }else if(num < 100){
            return tens[num / 10] + " " + helper(num % 10);
        }else{
            return less20[num / 100] + " Hundred " + helper(num % 100);
        }
    }
}

/*
Thinking:
1. Create string arrays for numbers less than 20, tens and thousands.
2. Create helper method to handle numbers less than 1000.
3. Use a while-loop to call helper method.
4. Return res.trim() to cut space at the start and end.
*/