//time:O(nlogn),space:O(n)
class Solution {
    public String largestNumber(int[] nums) {
        if(nums == null || nums.length == 0)
            return "";
        String[] res = new String[nums.length];
        for(int i = 0; i < nums.length; i++){
            res[i] = String.valueOf(nums[i]);
        }
        /*
        Arrays.sort(res, new Comparator<String>(){
            @Override
            public int compare(String str1, String str2){
                return (str2 + str1).compareTo(str1 + str2);
            }
        });
        */
        Arrays.sort(res, (a, b) -> (b + a).compareTo(a + b));
        if(res[0].charAt(0) == '0')
            return "0";
        StringBuilder sb = new StringBuilder();
        for(String s : res){
            sb.append(s);
        }
        return sb.toString();
    }
}

/*
Thinking:
1. Create a string list. Put each element in string list.
2. Sort the string array accroding to the order induced by the specified comparator.
3. Check if the first number is zero.
   If not, create a stringbuilder and append each string.
4. Return sb.toString();
*/