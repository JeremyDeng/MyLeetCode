//time:O(nlogn),space:O(n)
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        for(int i = 0; i < intervals.length; i++){
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int res = 0;
        int curEnd = 0;
        for(int i = 0; i < intervals.length; i++){
            if(starts[i] < ends[curEnd]){
                res++;
            }else{
                curEnd++;
            }
        }
        return res;
    }
}

/*
Thinking:
1. Create two arrays and assign start and end.
2. Sort two arrays.
3. If a meeting starts before previous meeting ends, res++.
   Otherwise, curEnd++.
*/