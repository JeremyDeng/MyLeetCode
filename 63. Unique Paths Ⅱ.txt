/*
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        if(obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) return 0;
        int[][] paths = new int[m][n];
        paths[0][0] = 1;
        for(int i = 1; i < m; i++){
            if(obstacleGrid[i][0] == 1 || paths[i - 1][0] == 0) paths[i][0] = 0;
            else paths[i][0] = 1;
        }
        for(int j = 1; j < n; j++){
            if(obstacleGrid[0][j] == 1 || paths[0][j - 1] == 0) paths[0][j] = 0;
            else paths[0][j] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1) paths[i][j] = 0;
                else paths[i][j] = paths[i][j - 1] + paths[i - 1][j];
            }
        }
        return paths[m - 1][n - 1];
    }
}
*/

public class Solution{
    public int uniquePathsWithObstacles(int[][] obstacleGrid){
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        if(obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) return 0;
        int[] paths = new int[n];
        paths[0] = 1;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1) paths[j] = 0;
                else if(j > 0) paths[j] += paths[j - 1];
            }
        }
        return paths[n - 1];
    }
}