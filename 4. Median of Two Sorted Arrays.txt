//time:O(log(min(m, n))),space:O(1)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int len = nums1.length + nums2.length;
        int cut1 = 0;
        int cut2 = 0;
        int cutL = 0;
        int cutR = nums1.length;
        while (cut1 <= nums1.length) {
            cut1 = (cutR - cutL) / 2 + cutL;
            cut2 = len / 2 - cut1;
            double L1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];
            double L2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];
            double R1 = (cut1 == nums1.length) ? Integer.MAX_VALUE : nums1[cut1];
            double R2 = (cut2 == nums2.length) ? Integer.MAX_VALUE : nums2[cut2];
            if (L1 > R2) {
                cutR = cut1 - 1;
            } else if (L2 > R1) {
                cutL = cut1 + 1;
            } else {
                if (len % 2 == 0) {
                    L1 = L1 > L2 ? L1 : L2;
                    R1 = R1 < R2 ? R1 : R2;
                    return (L1 + R1) / 2;
                } else {
                    R1 = R1 < R2 ? R1 : R2;
                    return R1;
                }
            }
        }
        return -1;
    }
}
/*
Thinking:

index: 0  1   2  3  4  5
nums1: 3  5 / 8  9
nums2: 1  2  7 / 10 11 12
nums3: 1 2 3 5 7 / 8 9 10 11 12

1.There should have 2 cuts. cut1 and cut2 mean how many numbers are at left.
2.Once we know cut1 we will also know cut2 coz we have equal numbers at left and right.
3.L1,L2 are the biggest number in left parts. R1,R2 are smallest number in right part.
4.If L1 > R2, cut1 moves to left. If L2 > R2, cut2 moves to right.
5.(curL,cutR) is the range of cut in nums1.
*/