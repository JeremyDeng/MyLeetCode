//time:O(n),space:O(n)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int res = 0, start = 0, end = 0;
        while (start < s.length() && end < s.length()) {
            if (set.contains(s.charAt(end))) {
                set.remove(s.charAt(start++));
            } else {
                set.add(s.charAt(end++));
                res = Math.max(res, set.size());
            }
        }
        return res;
    }
}

/*
Thinking:
1. Use HashSet to store character appeared.
2. Sliding window.
3. End point moves first and add new character to set.
4. When end point meet duplicate character, move start point until substring [start, end)
   has no repeating characters.
*/