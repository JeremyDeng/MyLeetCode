//The complexity of the algorithm is  O(n(logn)(loglogn)) bit operations.
//space:O(n)
class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n];
        int res = 0;
        for (int i = 2; i < n; i++) {
            if (notPrime[i] == false) {
                res++;
                for (int j = 2; i * j < n; j++) {
                    notPrime[i * j] = true;
                }
            }
        }
        return res;
    }
}

/*
Thinking:
1. It is called the Sieve of Eratosthenes algorithm. 
   In the boolean array m, m[n] means the number n. 
   Thus for each time, if m[n] is a prime, we need to delete all the multiple of m[n].
   And finally, the remaining numbers are primes.
*/