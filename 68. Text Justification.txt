//time:O(n),space:O(n)
class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> res = new ArrayList<>();
        int index = 0;
        while(index < words.length){
            int count = words[index].length();
            int last = index + 1;
            while(last < words.length){
                if(words[last].length() + count + 1 > maxWidth) break;
                count += 1 + words[last].length();
                last++;
            }
            StringBuilder sb = new StringBuilder();
            sb.append(words[index]);
            int diff = last - index - 1;
            if(last == words.length || diff == 0){
                for(int i = index + 1; i < last; i++){
                    sb.append(" ");
                    sb.append(words[i]);
                }
                for(int i = sb.length(); i < maxWidth; i++){
                    sb.append(" ");
                }
            }else{
                int spaces = (maxWidth - count) / diff;
                int r = (maxWidth - count) % diff;
                for(int i = index + 1; i < last; i++){
                    for(int k = spaces; k > 0; k--){
                        sb.append(" ");
                    }
                    if(r > 0){
                        sb.append(" ");
                        r--;
                    }
                    sb.append(" ");
                    sb.append(words[i]);
                }
            }
            res.add(sb.toString());
            index = last;
        }
        return res;
    }
}

/*
    public List<String> fullJustify(String[] words, int maxWidth) {
		List<String> res = new ArrayList<>();
		if (words == null || words.length == 0 || maxWidth < 0) return res;
		int n = words.length;
		int s = 0, e = 0;
		for (s = 0; s < n; s = e) {
			int len = -1;
			for (e = s; e < n && len + words[e].length() + 1 <= maxWidth; ++e) {
				len += words[e].length() + 1;
			}
			int space = 1;
			int extra = 0;
			if (e != s + 1 && e != n) {
				space = (maxWidth - len) / (e - s - 1) + 1;
				extra = (maxWidth - len) % (e - s - 1);
			}
			StringBuilder row = new StringBuilder(words[s]);
			for (int i = s + 1; i < e; ++i) {
				addSpaces(row, space);
				if (--extra >= 0) row.append(' ');
				row.append(words[i]);
			}
			addSpaces(row, maxWidth - row.length());
			res.add(row.toString());
		}
		return res;
	}
	private void addSpaces(StringBuilder row, int cnt) {
		while (cnt-- > 0) {
			row.append(' ');
		}
	}
*/