//time:O(n), space:O(1)
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) return false;
        int[] counter = new int[26];
        for (int i = 0; i < s.length(); i++) {
            counter[s.charAt(i) - 'a']++;
            counter[t.charAt(i) - 'a']--;
        }
        for (int count : counter) {
            if (count != 0) 
                return false;
        }
        return true;
    }
}
/*
Thinking:
1. To examine if tt is a rearrangement of ss, we can count occurrences of each letter
   in the two strings and compare them. Since both s and t contain only letters from
   a-z, a simple counter table of size 26 is suffice.
   
2. Follow up
   What if the inputs contain unicode characters? 
   How would you adapt your solution to such case?

   Answer

   Use a hash table instead of a fixed size counter. 
   Imagine allocating a large size array to fit the entire range of unicode characters,
   which could go up to more than 1 million. 
   A hash table is a more generic solution and could adapt to any range of characters.
*/