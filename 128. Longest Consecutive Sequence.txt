//time:O(n), space:O(n)
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int res = 0;
        Set<Integer> set = new HashSet<>();
        for (int num :nums) {
            set.add(num);
        }
        for (int num : nums) {
            if (set.remove(num)) {
                int val = num;
                int sum = 1;
                while (set.remove(val - 1))
                    val--;
                sum += num - val;
                
                val = num;
                while (set.remove(val + 1))
                    val++;
                sum += val - num;
                
                res = Math.max(res, sum);
            }
        }
        return res;
    }
}

/*
Thinking:
1. Store all elements in HashSet.
2. If an element has not been visited, remove it and check its left and right.
3. Record max value and return it as longest consecutive sequence.
*/