//time:O(m*n), space:O(n)
class Solution {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        for (int coin :coins) {
            for (int i = 0; i <= amount; i++) {
                if (i >= coin) {
                    dp[i] += dp[i - coin];
                }
            }
        }
        return dp[amount];
    }
}

/*
Thinking:
1. Create dp array to store how many combinations to form the amount(index).
2. dp[i] += dp[i - coin];
3. eg.
   coin:1, 2, 5. amount = 12.
   index   0  1  2  3  4  5  6  7  8  9  10 11 12
   coin=1  1  1  1  1  1  1  1  1  1  1  1  1  1
   coin=2  1  1  2  2  3  3  4  4  5  5  6  6  7
   coin=5  1  1  2  2  3  4  5  6  7  8  10 11 13
   
   when coin = 2, index = 4.
   combinations: 1 + 1 + 1 + 1  ->dp[4],when coin = 1.
                     1 + 1 + 2  
                         2 + 2   
                    dp[4-2]|                        
*/