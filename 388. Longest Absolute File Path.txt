//time:O(n),space:O(n)
class Solution {
    public int lengthLongestPath(String input) {
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        int res = 0;
        for(String s : input.split("\n")){
            int level = s.lastIndexOf("\t") + 1;
            while(level + 1 < stack.size()){
                stack.pop();
            }
            int len = stack.peek() + s.length() - level + 1;
            stack.push(len);
            if(s.contains(".")){
                res = Math.max(res, len - 1);
            }
        }
        return res;
    }
}

/*
利用栈（Stack）数据结构。

首先将字符串以'\n'进行分割，得到目录/文件的列表，记为parts

然后统计各目录/文件中'\t'的个数，表示当前目录/文件的深度

遍历parts，若栈顶元素的深度不小于parts的深度，则弹出栈顶元素，重复此过程。

然后将新的深度压入栈中，顺便统计当前目录的总长度。
*/
