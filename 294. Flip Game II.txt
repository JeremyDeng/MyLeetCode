//time:O(n!!), double factorial n
//T(N) = (N-2) * T(N-2) = (N-2) * (N-4) * T(N-4) ... = (N-2) * (N-4) * (N-6) * ... ~ O(N!!)
class Solution {
    public boolean canWin(String s) {
        if (s == null || s.length() == 0) return false;
        char[] arr = s.toCharArray();
        return helper(arr);
    }
    
    private boolean helper(char[] arr){        
        for (int i = 0; i < arr.length - 1; i++){
            if (arr[i] == '+' && arr[i + 1] == '+'){
                arr[i] = '-';
                arr[i + 1] = '-';
                boolean res = helper(arr);
                arr[i] = '+';
                arr[i + 1] = '+';
                if (!res){
                    return true;
                }
            }
        }
        return false;
    }
}

/*
Thinking:
1. dfs + backtracking.
2. Convert input string s into charArray.
3. Change first two '+' to '-' and backtrack it recorded as res.
4. Change two elements back to '+' and check if res return false,
   which means if the opponent loses, we win.
*/