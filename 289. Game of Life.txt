class Solution {
    public void gameOfLife(int[][] board) {
        if(board == null || board.length == 0) return;
        int m = board.length, n = board[0].length;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int lives = liveNeighbors(board, m, n, i, j);
                if(board[i][j] == 1 && lives >= 2 && lives <= 3){
                    board[i][j] = 3;
                }
                if(board[i][j] == 0 && lives == 3){
                    board[i][j] = 2;
                }
            }
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                board[i][j] >>= 1;
            }
        }
    }
    
    public int liveNeighbors(int[][] board, int m, int n, int i, int j){
        int lives = 0;
        for(int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++){
            for(int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++){
                lives += board[x][y] & 1;
            }
        }
        lives -= board[i][j] & 1;
        return lives;
    }
}

/*
class Solution {
    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int[][] neighbors = new int[n][m];
        for (int i = 0; i < n; ++i){
            for (int j = 0; j < m; ++j){
                neighbors[i][j] = live(board, i-1, j) + live(board, i-1, j-1) + live(board, i-1, j+1) + live(board, i, j-1) + live(board, i, j+1) + live(board, i+1, j-1) + live(board, i+1, j) + live(board, i+1, j+1);

            }
        }
        for (int i = 0; i<n; i++){
            for (int j = 0; j<m; j++){
                if (neighbors[i][j] < 2){
                    board[i][j]=0;
                }
                if (neighbors[i][j] == 2){
                    board[i][j] = board[i][j];
                }
                if (neighbors[i][j] == 3){
                     board[i][j] = 1;
                }
                if (neighbors[i][j] >3){
                    board[i][j] = 0;
                }
            }
        }
        
    }
    int live(int[][] board, int i, int j){
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length){
            return 0;
        }else{
            return board[i][j];
        }
    }
}
*/