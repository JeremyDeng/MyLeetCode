//BFS
//time:O(V + E),space:O(n)
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int res = numCourses;
        for(int[] pair : prerequisites){
            indegree[pair[0]]++;
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < indegree.length; i++){
            if(indegree[i] == 0){
                queue.offer(i);
            }
        }
        
        while(!queue.isEmpty()){
            int pre = queue.poll();
            res--;
            for(int[] pair : prerequisites){
                if(pair[1] == pre){
                    indegree[pair[0]]--;
                    if(indegree[pair[0]] == 0){
                        queue.offer(pair[0]);
                    }
                }
            }
        }
        return res == 0;
    }
}

/*
Thinking:
1. Topological sort.
2. Find if there is circle.
3. everty time delete the node with 0 indegree,
   then minus the indegree of its pointed node by one.
*/