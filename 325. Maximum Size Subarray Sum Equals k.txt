//time:O(n),space:O(n)
class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        int max = 0;
        int sum = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (sum == k) {
                max = Math.max(max, i + 1);
            }
            if (map.containsKey(sum - k)) {
                max = Math.max(max, i - map.get(sum - k));
            }
            if (!map.containsKey(sum)) {
                map.put(sum, i);
            }
        }
        return max;
    }
}

/*
Thinking:
1. The HashMap stores the sum of all elements before index i as key, and i as value.
2. For each i, check not only the current sum but also (currentSum - previousSum) to 
   see if there is any that equals k, and update max length.
*/