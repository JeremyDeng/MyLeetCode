/*
class Solution {
    public int maxProfit(int[] prices) {
	    int maxProfit1 = 0; 
	    int maxProfit2 = 0; 
	    int lowestBuyPrice1 = Integer.MAX_VALUE;
	    int lowestBuyPrice2 = Integer.MAX_VALUE;
	   
	    for(int p:prices){
	    	maxProfit2 = Math.max(maxProfit2, p-lowestBuyPrice2);
	    	lowestBuyPrice2 = Math.min(lowestBuyPrice2, p-maxProfit1);
	    	maxProfit1 = Math.max(maxProfit1, p-lowestBuyPrice1);
	    	lowestBuyPrice1 = Math.min(lowestBuyPrice1, p);
	    }
	    return maxProfit2;    
    }
}
*/

class Solution{
    public int maxProfit(int[] prices){
        if(prices == null || prices.length < 2) return 0;
        int[] left = new int[prices.length];
        int[] right = new int[prices.length];
        
        //DP from left to right;
        left[0] = 0;
        int min = prices[0];
        for(int i = 1; i < prices.length; i++){
            min = Math.min(min, prices[i]);
            left[i] = Math.max(left[i - 1], prices[i] - min);
        }
        
        //DP from right to left;
        right[prices.length - 1] = 0;
        int max = prices[prices.length - 1];
        for(int i = prices.length - 2; i >= 0; i--){
            max = Math.max(max, prices[i]);
            right[i] = Math.max(right[i + 1], max - prices[i]);
        }
        
        int profit = 0;
        for(int i = 0; i < prices.length; i++){
            profit = Math.max(profit, left[i] +  right[i]);
        }
        return profit;
    }
}