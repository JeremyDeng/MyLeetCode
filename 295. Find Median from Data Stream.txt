class MedianFinder {
    private PriorityQueue<Long> small;
    private PriorityQueue<Long> large;
    
    /** initialize your data structure here. */
    public MedianFinder() {
        small = new PriorityQueue<>();
        large = new PriorityQueue<>();
    }
    
    //O(logn)
    public void addNum(int num) {
        large.add((long)num);
        small.add(-large.poll());
        if(large.size() < small.size()){
            large.add(-small.poll());
        }
    }
    
    //O(1)
    public double findMedian() {
        return large.size() > small.size()
            ? large.peek()
            : (large.peek() - small.peek()) / 2.0;
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */

/*
Thinking: 
1. I keep two heaps (or priority queues):

2. Max-heap small has the smaller half of the numbers.
   Min-heap large has the larger half of the numbers.
   This gives me direct access to the one or two middle values (they're the tops of the 
   heaps), so getting the median takes O(1) time. And adding a number takes O(log n)time.

3. Supporting both min- and max-heap is more or less cumbersome, depending on the language,
   so I simply negate the numbers in the heap in which I want the reverse of the default order. 
   To prevent this from causing a bug with -231 (which negated is itself, when using 32-bit ints),
   I use integer types larger than 32 bits.

4. Using larger integer types also prevents an overflow error when taking the mean of 
   the two middle numbers. I think almost all solutions posted previously have that bug.
*/