//time:O(n), space:O(1)
class Solution {
    public int minCost(int[][] costs) {
        if(costs.length == 0 || costs[0].length == 0) return 0;
        for(int i = 1; i < costs.length; i++){
            costs[i][0] += Math.min(costs[i - 1][1], costs[i - 1][2]);
            costs[i][1] += Math.min(costs[i - 1][0], costs[i - 1][2]);
            costs[i][2] += Math.min(costs[i - 1][0], costs[i - 1][1]);
        }
        int n = costs.length - 1;
        return Math.min(Math.min(costs[n][0], costs[n][1]), costs[n][2]);
    }
}

/*
Thinking:
1. color of house number i:
   red : min(color of house i-1: blue, green).
   blue: min(color of house i-1: red, green).
   green: min(color of house i-1: red, blue).
   
   ans: min(color of house n: red, blue, green).
*/