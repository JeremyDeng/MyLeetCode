//time:O(n), space:O(1)
public class Solution {
    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length <= 1) return;
        int i = nums.length - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1, nums.length - 1);
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start++, end--);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

/*
Thinking:
1. Search from back to front. Find the first number nums[i] that smaller than nums[i+1].
2. If i>=0,
   search (i, nums.length - 1] from back to front, find first number nums[j] that
   greater than nums[i].
   swap nums[i] and nums[j].
3. reverse i+1 ~ nums.length - 1.
*/