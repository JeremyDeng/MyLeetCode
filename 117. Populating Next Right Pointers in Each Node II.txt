/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
//level order: time:O(n), space:O(1)
public class Solution {
    
    //based on level order traversal
    public void connect(TreeLinkNode root) {

        TreeLinkNode head = null; //Most left node of the next level
        TreeLinkNode prev = null; //the leading node of the next level
        TreeLinkNode cur = root;  //current node of current level

        while (cur != null) { //iterate on levels
                while (cur != null) { //iterate on the current level
                
                //left child
                if (cur.left != null) {
                    if (prev != null) {
                        prev.next = cur.left;
                    } else {
                        head = cur.left;
                    }
                    prev = cur.left;
                }
                    
                //right child
                if (cur.right != null) {
                    if (prev != null) {
                        prev.next = cur.right;
                    } else {
                        head = cur.right;
                    }
                    prev = cur.right;
                }
                    
                //move to next node
                cur = cur.next;
            }
            
            //move to next level
            cur = head;
            head = null;
            prev = null;
        }
        
    }
}

/*
Thinking:
1. Use head to record most left node of the next level.
   Use pre to record the leading node of the next level. pre -> ...
   Use cur to record current node of current level.
2. functions:
   head : update cur when move to next level.
   cur: move from left to right on current level.
   pre: connect previous note to next one.
*/