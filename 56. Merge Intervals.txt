/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<>();
        if(intervals == null || intervals.size() == 0) 
            return result;
        Collections.sort(intervals, new IntervalComparator());
        Interval last = intervals.get(0);
        for(int i = 1; i < intervals.size(); i++){
            Interval current = intervals.get(i);
            if(last.end < current.start){
                result.add(last);
                last = current;
            }else if(last.end < current.end)
                    last.end = current.end;
        }
        result.add(last);
        return result;
    }
    
    public class IntervalComparator implements Comparator<Interval>{
        @Override
        public int compare(Interval a, Interval b){
            return a.start - b.start;
        }
    }
}