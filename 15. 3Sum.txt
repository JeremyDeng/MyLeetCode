//time:O(n^2), space O(n)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            int j = i + 1, k = nums.length - 1, target = -nums[i];
            while (j < k) {
                if (nums[j] + nums[k] == target) {
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    j++;
                    k--;
                } else if (nums[j] + nums[k] < target) {
                    j++;
                } else {
                    k--;
                } 
            }    
        }
        return res;
    }
}

/*
Thinking:
1. Create List<List<Integer>> res to store results.
2. Sort input array first.
3. Traverse the sorted array, starting from index 0 to nums.length - 2.
4. Skip duplicates.
5. Create two pointers j and k and keep looking for valid result.
6. Skip duplicates when a result is found.
*/