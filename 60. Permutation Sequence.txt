//time:O(n^2), space:O(n)
//traverse costs O(n) * remove costs O(n), so O(n^2)
class Solution {
    public String getPermutation(int n, int k) {
        List<Integer> numbers = new ArrayList<>();
        
        // create a list of numbers to get indices
        for (int i = 1; i <= n; i++) {
            numbers.add(i);
        }
        
        // create an array of factorial lookup
        // factorial[] = {1, 1, 2, 6, 24, ... n!}
        int[] factorial = new int[n];
        factorial[0] = 1;
        for (int i = 1; i < n; i++) {
            factorial[i] = i * factorial[i - 1];
        }
        
        k = k - 1;   //factorial[0] = 1
        StringBuilder sb = new StringBuilder();
        for (int i = n; i > 0; i--) {
            int index = k / factorial[i - 1];
            k = k % factorial[i - 1];
            sb.append(numbers.get(index));
            numbers.remove(index);
        }
        return sb.toString();
    }
}

/*
1, 2, 3, 4:

     1 + {2, 3, 4}
     2 + {1, 3, 4}
     3 + {1, 2, 4}
     4 + {1, 2, 3}
     
     18 : 3421
     
     numbers: {1 2 3 4}
     factorial[]: {1 1 2 6}
     
     k = 17
     i = 4    index = 17 / 6 = 2   k = 17 % 6 = 5
     i = 3    index = 5 / 2 = 2    k = 5 % 2 = 1
     i = 2    index = 1 / 1 = 1    k = 1 % 1 = 0
     4 3 2 1
     3 4 2 1
*/