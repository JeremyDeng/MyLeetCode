//time:O(n^2)?,space:O(n)
class Solution {
    public List<String> findStrobogrammatic(int n) {
        return helper(n, n);
    }
    
    public List<String> helper(int n, int m){
        if(n == 0) return new ArrayList<>(Arrays.asList(""));
        if(n == 1) return new ArrayList<>(Arrays.asList("0", "1", "8"));
        
        List<String> list = helper(n - 2, m);
        List<String> res = new ArrayList<>();
        
        for(int i = 0; i < list.size(); i++){
            String s = list.get(i);
            if(n != m){
                res.add("0" + s + "0");
            }
            res.add("1" + s + "1");
            res.add("6" + s + "9");
            res.add("9" + s + "6");
            res.add("8" + s + "8");
        }
        return res;
    }
}

/*
Thinking:
1. Use a helper method. n is current integer and m is initial input n.
2. Use recursion. Start from the middle part and add left and right part each time.
3. When n == m, it means we are adding the most outside part.
   So we can not add zero this time.
*/