//time:O(n), space:O(1)
class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        return Math.max(helper(nums, 0, nums.length - 2), helper(nums, 1, nums.length - 1));
    }
    
    public int helper(int[] nums, int start, int end) {
        int curMax = 0;
        int preMax = 0;
        for (int i = start; i <= end; i++) {
            int temp = curMax;
            curMax = Math.max(curMax, preMax + nums[i]);
            preMax = temp;
        }
        return curMax;
    }
}

/*
Thinking:
1. Similar as House Robber one.
2. Devide the circle into two ranges:
   start from 0 to nums.length - 2,and 1 to nums.length - 1.
*/