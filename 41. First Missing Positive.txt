//time:O(n), space:O(1)
class Solution {
    public int firstMissingPositive(int[] nums) {
        if (nums == null || nums.length == 0) return 1;
        for (int i = 0; i < nums.length; i++) {
            while (nums[i] > 0 && nums[i] <= nums.length && nums[nums[i] - 1] != nums[i]) {
                int temp = nums[nums[i] - 1];
                nums[nums[i] - 1] = nums[i];
                nums[i] = temp;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        return nums.length + 1;
    }
}

/*
Thinking:
1. Put the number at the position that nums[i] == i + 1.
2. Traverse the array and find the first missing positive.

eg. 
Array:  [3, 4, -1, 1]
Index:   0, 1,  2, 3
nums[0] == 3, so we should put 3 at index 2. [-1, 4, 3, 1].
nums[0] == -1. nums[1] = 4. -> [-1, 1, 3, 4]. -> [1, -1, 3, 4].
nums[1] != 2, return 2.
*/